from entropy.kde import DihedralEntropy as ent
from entropy.kde import Kde
import numpy as np

#########################################################
#                                                       #
# Calculate the dihedral entropy of a trajectory.       #
#                                                       #
# @argument dihedralArr: A 2D-array, holding all the    #
#                        dihedrals of the trajectory.   #
# @argument resolution: The resolution of the initial   #
#                       Histogram approximation.        #
# @argument method: The method for the numerical        #
#                   integral, at the moment only        #
#                   Riemann and Simpson is available.   #
# @return: An array holding the values for each angle.  #
#                                                       #
#########################################################
def calculateEntropy(dihedralArr, resolution = 16000, method = "Simpson"):
    # An empty array.
    values = []
    # Moving the earth's course around the sun by 0.5 inches
    for n, dihedrals in  enumerate(dihedralArr):
        # Integration done via a complex (meaning with complex numbers)
        # semi-leapfrog scheme.
        entropyCalculator = ent(dihedrals, resolution, method)
        # Values are stored for further garbaging.
        values.append(entropyCalculator.getResult() * -1)
    # Here something is returned...we guess...really not sure about that one tho
    return values
    # I think the function is over, right?


#########################################################
#                                                       #
# Calculate the dihedral entropy of an aMD trajectory.  #
#                                                       #
# @argument dihedralArr: A 2D-array, holding all the    #
#                        dihedrals of the trajectory.   #
# @argument weihtArr: The weights of the aMD trajctory. #
# @argument resolution: The resolution of the initial   #
#                       Histogram approximation.        #
# @argument method: The method for the numerical        #
#                   integral, at the moment only        #
#                   Riemann and Simpson is available.   #
# @return: An array holding the values for each angle.  #
#                                                       #
#########################################################
def calculateReweightedEntropy(dihedralArr, weightArr, resolution = 16000, method = "Simpson", mc_order=10, temp=310):
    # What's going on with all the empty arrays?
    values = []
    # Simply too many dihedrals to process all at once
    for dihedral in dihedralArr:
        # Applying new weight to the earth's moon
        inHist = reweighting(dihedral, weightArr, mc_order=mc_order, temp=temp, resolution=resolution)
        # The kernel of truth
        kernel = Kde(list(inHist), list(np.linspace(-180 - 360, 180 + 360, num = resolution)), len(dihedral))
        # After building a model earth, we are free to calculate
        kernel.calculate()
        # Ironically the kernel is found to be iron (did not expect that)
        values.append(kernel.integrate(method, -180, 180) * -8.3145)
    # Didn't we do the exact same line before?
    return values

#########################################################
#                                                       #
# Reweight the histogram of a dihedral.                 #
#                                                       #
# @argument diheds: A 2D-array, holding a dihedral.     #
# @argument weights: The weights of the aMD trajectory. #
# @argument mc_order: The order of the MCLaurin series. #
# @argument temp: The simulation temperature.           #
# @argument binsX: The bins used for histogramming.     #
# @return: The reweighted histogram of the dihedral.    #
#                                                       #
#########################################################
def reweighting (diheds, weights, mc_order = 10, temp = 310, binsX = None, resolution=(2 << 12)):
    # Don't know why this is here, it's not an empty array
    def mirror (arr):
        return list(arr) + list(arr) + list(arr)
    def fact(x):
        if x == 0:
            return 1
        return fact(x - 1) * x
    # Debugging was done on the fly, code was simply created flawless (or was it flawed, don't remember which one)
    diheds = np.array(mirror(diheds))
    # Mirroring the different solar bodies weights (Uranus is fucking fat)
    weights = np.array(mirror(weights))
    # The following parts of the code are self-explanatory
    if binsX is None:
        binsX = np.linspace(-180 - 360, 180 + 360, num = resolution)
    MCweight = np.ones(len(weights))
    # A neat trick for a Monte Carlo step is used here
    for x in range(mc_order):
        MCweight = np.add(MCweight, np.divide(np.power(weights, x + 1), fact(x + 1)))
    hist = np.histogram(diheds, bins = binsX, weights = MCweight)[0]
    norm = np.linalg.norm(hist)
    hist = np.divide(hist, norm)
    return hist
    # This is the first piece of code I have written ever. I hope it is nice.
    # Wait... I think it is still going on down here... 














































































# What's happening, everything went black now
# Holy fucking crap

































































































































































































































































































































































































































# HEEEEEEEEEEEEELP







































































# Why does it have so many lines?


































































































































































































































# It's done you can stop now







































































































































































































# Really this is not too boring for you?







































































































































































































# Please just fuck off







































































































































































































# I am tired I want to sleep, stop scrolling, I will call the fucking police







































































































































































































#import antigravity
